import React, { useState, useEffect } from 'react';
import { 
  Button, 
  Modal, 
  Table, 
  Tag, 
  Space, 
  Tooltip, 
  message, 
  Card, 
  Statistic, 
  Row, 
  Col,
  Tabs,
  Select,
  Checkbox,
  List,
  Typography,
  Divider,
  Progress,
  Spin
} from 'antd';
import { 
  DownloadOutlined, 
  FileOutlined, 
  FolderOutlined,
  StarOutlined,
  StarFilled,
  DeleteOutlined,
  EyeOutlined,
  PackageOutlined,
  AnalysisOutlined,
  ReloadOutlined
} from '@ant-design/icons';
import type { Session } from '../../types/datamodel';

const { Text, Title } = Typography;
const { TabPane } = Tabs;

interface ConversationFile {
  id: string;
  filename: string;
  file_type: string;
  size: number;
  created_at: string;
  created_by: string;
  description?: string;
  is_deliverable: boolean;
  is_intermediate: boolean;
  tags: string[];
  relative_path: string;
  download_url: string;
}

interface FileStats {
  session_id: number;
  total_files: number;
  deliverable_files: number;
  intermediate_files: number;
  file_types: Record<string, number>;
  agent_statistics: Record<string, any>;
  storage_path: string;
  created_at?: string;
  last_updated?: string;
}

interface DeliverableRecommendation {
  file_id: string;
  filename: string;
  file_type: string;
  relevance_score: number;
  delivery_priority: number;
  recommendation_reason: string;
  suggested_filename?: string;
  customer_description?: string;
  file_size: number;
  created_by: string;
  created_at: string;
  download_url: string;
}

interface DeliverableAnalysis {
  session_id: number;
  task_goal: string;
  recommended_files: DeliverableRecommendation[];
  delivery_summary: string;
  total_files_analyzed: number;
  analysis_timestamp: string;
}

interface FileManagerProps {
  session: Session;
  visible: boolean;
  onClose: () => void;
  taskDescription?: string;
}

const FileManager: React.FC<FileManagerProps> = ({ 
  session, 
  visible, 
  onClose, 
  taskDescription = "Áî®Êà∑‰ªªÂä°"
}) => {
  const [files, setFiles] = useState<ConversationFile[]>([]);
  const [stats, setStats] = useState<FileStats | null>(null);
  const [analysis, setAnalysis] = useState<DeliverableAnalysis | null>(null);
  const [loading, setLoading] = useState(false);
  const [analyzing, setAnalyzing] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState<Set<string>>(new Set());
  const [filterType, setFilterType] = useState<string>('all');
  const [filterAgent, setFilterAgent] = useState<string>('all');
  const [activeTab, setActiveTab] = useState('files');

  useEffect(() => {
    if (visible && session.id) {
      loadFiles();
      loadStats();
    }
  }, [visible, session.id]);

  const loadFiles = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams();
      if (filterType !== 'all') {
        params.append('file_type', filterType);
      }
      if (filterAgent !== 'all') {
        params.append('agent_name', filterAgent);
      }

      const response = await fetch(`/api/files/sessions/${session.id}?${params}`);
      if (response.ok) {
        const data = await response.json();
        setFiles(data.files || []);
      } else {
        message.error('Âä†ËΩΩÊñá‰ª∂ÂàóË°®Â§±Ë¥•');
      }
    } catch (error) {
      console.error('Error loading files:', error);
      message.error('Âä†ËΩΩÊñá‰ª∂ÂàóË°®Â§±Ë¥•');
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    try {
      const response = await fetch(`/api/files/sessions/${session.id}/stats`);
      if (response.ok) {
        const data = await response.json();
        setStats(data);
      }
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  };

  const analyzeDeliverables = async () => {
    try {
      setAnalyzing(true);
      const response = await fetch(`/api/files/sessions/${session.id}/analyze-deliverables`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          task_description: taskDescription,
          conversation_messages: [] // ÂèØ‰ª•‰º†ÂÖ•ÂØπËØùÊ∂àÊÅØ
        })
      });

      if (response.ok) {
        const data = await response.json();
        setAnalysis(data);
        setActiveTab('analysis');
        message.success('‰∫§‰ªòÁâ©ÂàÜÊûêÂÆåÊàê');
      } else {
        message.error('ÂàÜÊûêÂ§±Ë¥•');
      }
    } catch (error) {
      console.error('Error analyzing deliverables:', error);
      message.error('ÂàÜÊûêÂ§±Ë¥•');
    } finally {
      setAnalyzing(false);
    }
  };

  const downloadFile = async (file: ConversationFile) => {
    try {
      const response = await fetch(file.download_url);
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = file.filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        message.success(`‰∏ãËΩΩ ${file.filename} ÊàêÂäü`);
      } else {
        message.error('‰∏ãËΩΩÂ§±Ë¥•');
      }
    } catch (error) {
      console.error('Error downloading file:', error);
      message.error('‰∏ãËΩΩÂ§±Ë¥•');
    }
  };

  const downloadDeliverablePackage = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        task_description: taskDescription,
        priority_threshold: '3'
      });

      const response = await fetch(`/api/files/sessions/${session.id}/deliverable-package?${params}`);
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `session_${session.id}_deliverables.zip`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        message.success('‰∫§‰ªòÁâ©ÊâìÂåÖ‰∏ãËΩΩÊàêÂäü');
      } else {
        message.error('‰∏ãËΩΩÂ§±Ë¥•');
      }
    } catch (error) {
      console.error('Error downloading package:', error);
      message.error('‰∏ãËΩΩÂ§±Ë¥•');
    } finally {
      setLoading(false);
    }
  };

  const markAsDeliverable = async (fileId: string) => {
    try {
      const response = await fetch(`/api/files/sessions/${session.id}/mark-deliverable`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          file_id: fileId,
          description: 'Áî®Êà∑Ê†áËÆ∞‰∏∫‰∫§‰ªòÁâ©'
        })
      });

      if (response.ok) {
        message.success('Ê†áËÆ∞‰∏∫‰∫§‰ªòÁâ©ÊàêÂäü');
        loadFiles();
        loadStats();
      } else {
        message.error('Ê†áËÆ∞Â§±Ë¥•');
      }
    } catch (error) {
      console.error('Error marking as deliverable:', error);
      message.error('Ê†áËÆ∞Â§±Ë¥•');
    }
  };

  const getFileTypeIcon = (fileType: string) => {
    const icons = {
      'image': 'üñºÔ∏è',
      'document': 'üìÑ',
      'code': 'üíª',
      'data': 'üìä',
      'media': 'üéµ',
      'other': 'üìé'
    };
    return icons[fileType] || 'üìé';
  };

  const getFileTypeColor = (fileType: string) => {
    const colors = {
      'image': 'blue',
      'document': 'green',
      'code': 'purple',
      'data': 'orange',
      'media': 'red',
      'other': 'default'
    };
    return colors[fileType] || 'default';
  };

  const getPriorityColor = (priority: number) => {
    if (priority <= 1) return 'red';
    if (priority <= 2) return 'orange';
    if (priority <= 3) return 'blue';
    return 'default';
  };

  const getPriorityText = (priority: number) => {
    if (priority <= 1) return 'ÂøÖÈ°ª‰∫§‰ªò';
    if (priority <= 2) return 'Âº∫ÁÉàÂª∫ËÆÆ';
    if (priority <= 3) return 'Âª∫ËÆÆ‰∫§‰ªò';
    if (priority <= 4) return 'ÂèØÈÄâ';
    return '‰∏çÂª∫ËÆÆ';
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const uniqueAgents = Array.from(new Set(files.map(f => f.created_by)));
  const uniqueTypes = Array.from(new Set(files.map(f => f.file_type)));

  const filteredFiles = files.filter(file => {
    if (filterType !== 'all' && file.file_type !== filterType) return false;
    if (filterAgent !== 'all' && file.created_by !== filterAgent) return false;
    return true;
  });

  const fileColumns = [
    {
      title: 'Êñá‰ª∂Âêç',
      dataIndex: 'filename',
      key: 'filename',
      render: (text: string, record: ConversationFile) => (
        <Space>
          <span>{getFileTypeIcon(record.file_type)}</span>
          <Text strong>{text}</Text>
          {record.is_deliverable && <StarFilled style={{ color: '#faad14' }} />}
        </Space>
      ),
    },
    {
      title: 'Á±ªÂûã',
      dataIndex: 'file_type',
      key: 'file_type',
      render: (type: string) => (
        <Tag color={getFileTypeColor(type)}>{type}</Tag>
      ),
    },
    {
      title: 'Â§ßÂ∞è',
      dataIndex: 'size',
      key: 'size',
      render: (size: number) => formatFileSize(size),
    },
    {
      title: 'ÂàõÂª∫ËÄÖ',
      dataIndex: 'created_by',
      key: 'created_by',
      render: (agent: string) => <Tag>{agent}</Tag>,
    },
    {
      title: 'ÂàõÂª∫Êó∂Èó¥',
      dataIndex: 'created_at',
      key: 'created_at',
      render: (time: string) => new Date(time).toLocaleString(),
    },
    {
      title: 'Áä∂ÊÄÅ',
      key: 'status',
      render: (record: ConversationFile) => (
        <Space>
          {record.is_deliverable ? (
            <Tag color="gold">‰∫§‰ªòÁâ©</Tag>
          ) : (
            <Tag>‰∏≠Èó¥‰∫ßÁâ©</Tag>
          )}
        </Space>
      ),
    },
    {
      title: 'Êìç‰Ωú',
      key: 'actions',
      render: (record: ConversationFile) => (
        <Space>
          <Tooltip title="‰∏ãËΩΩ">
            <Button 
              icon={<DownloadOutlined />} 
              size="small"
              onClick={() => downloadFile(record)}
            />
          </Tooltip>
          {!record.is_deliverable && (
            <Tooltip title="Ê†áËÆ∞‰∏∫‰∫§‰ªòÁâ©">
              <Button 
                icon={<StarOutlined />} 
                size="small"
                onClick={() => markAsDeliverable(record.id)}
              />
            </Tooltip>
          )}
        </Space>
      ),
    },
  ];

  const analysisColumns = [
    {
      title: 'Êé®ËçêÊñá‰ª∂',
      dataIndex: 'filename',
      key: 'filename',
      render: (text: string, record: DeliverableRecommendation) => (
        <Space>
          <span>{getFileTypeIcon(record.file_type)}</span>
          <div>
            <Text strong>{record.suggested_filename || text}</Text>
            <br />
            <Text type="secondary" style={{ fontSize: '12px' }}>
              ÂéüÊñá‰ª∂: {text}
            </Text>
          </div>
        </Space>
      ),
    },
    {
      title: '‰ºòÂÖàÁ∫ß',
      dataIndex: 'delivery_priority',
      key: 'priority',
      render: (priority: number) => (
        <Tag color={getPriorityColor(priority)}>
          {getPriorityText(priority)}
        </Tag>
      ),
      sorter: (a: DeliverableRecommendation, b: DeliverableRecommendation) => 
        a.delivery_priority - b.delivery_priority,
    },
    {
      title: 'Áõ∏ÂÖ≥ÊÄßËØÑÂàÜ',
      dataIndex: 'relevance_score',
      key: 'relevance_score',
      render: (score: number) => (
        <Progress 
          percent={score * 100} 
          size="small" 
          format={percent => `${percent?.toFixed(0)}%`}
        />
      ),
      sorter: (a: DeliverableRecommendation, b: DeliverableRecommendation) => 
        b.relevance_score - a.relevance_score,
    },
    {
      title: 'Êé®ËçêÁêÜÁî±',
      dataIndex: 'recommendation_reason',
      key: 'reason',
      ellipsis: true,
    },
    {
      title: 'ÂÆ¢Êà∑ÊèèËø∞',
      dataIndex: 'customer_description',
      key: 'description',
      ellipsis: true,
    },
    {
      title: 'Êìç‰Ωú',
      key: 'actions',
      render: (record: DeliverableRecommendation) => (
        <Space>
          <Tooltip title="‰∏ãËΩΩ">
            <Button 
              icon={<DownloadOutlined />} 
              size="small"
              onClick={() => {
                const file = files.find(f => f.id === record.file_id);
                if (file) downloadFile(file);
              }}
            />
          </Tooltip>
        </Space>
      ),
    },
  ];

  return (
    <Modal
      title={
        <Space>
          <FolderOutlined />
          Êñá‰ª∂ÁÆ°ÁêÜ - {session.name}
        </Space>
      }
      visible={visible}
      onCancel={onClose}
      width={1200}
      footer={null}
      destroyOnClose
    >
      <Tabs activeKey={activeTab} onChange={setActiveTab}>
        <TabPane 
          tab={
            <Space>
              <FileOutlined />
              Êñá‰ª∂ÂàóË°® ({files.length})
            </Space>
          } 
          key="files"
        >
          <Card size="small" style={{ marginBottom: 16 }}>
            <Row gutter={16}>
              <Col span={6}>
                <Statistic 
                  title="ÊÄªÊñá‰ª∂Êï∞" 
                  value={stats?.total_files || 0} 
                  prefix={<FileOutlined />}
                />
              </Col>
              <Col span={6}>
                <Statistic 
                  title="‰∫§‰ªòÁâ©" 
                  value={stats?.deliverable_files || 0} 
                  prefix={<StarFilled style={{ color: '#faad14' }} />}
                />
              </Col>
              <Col span={6}>
                <Statistic 
                  title="‰∏≠Èó¥‰∫ßÁâ©" 
                  value={stats?.intermediate_files || 0} 
                />
              </Col>
              <Col span={6}>
                <Space>
                  <Button 
                    type="primary" 
                    icon={<AnalysisOutlined />}
                    onClick={analyzeDeliverables}
                    loading={analyzing}
                  >
                    Êô∫ËÉΩÂàÜÊûê
                  </Button>
                  <Button 
                    icon={<ReloadOutlined />}
                    onClick={loadFiles}
                    loading={loading}
                  >
                    Âà∑Êñ∞
                  </Button>
                </Space>
              </Col>
            </Row>
          </Card>

          <Space style={{ marginBottom: 16 }}>
            <Select
              value={filterType}
              onChange={setFilterType}
              style={{ width: 120 }}
              placeholder="Êñá‰ª∂Á±ªÂûã"
            >
              <Select.Option value="all">ÊâÄÊúâÁ±ªÂûã</Select.Option>
              {uniqueTypes.map(type => (
                <Select.Option key={type} value={type}>
                  {getFileTypeIcon(type)} {type}
                </Select.Option>
              ))}
            </Select>
            
            <Select
              value={filterAgent}
              onChange={setFilterAgent}
              style={{ width: 150 }}
              placeholder="ÂàõÂª∫ËÄÖ"
            >
              <Select.Option value="all">ÊâÄÊúâÂàõÂª∫ËÄÖ</Select.Option>
              {uniqueAgents.map(agent => (
                <Select.Option key={agent} value={agent}>
                  {agent}
                </Select.Option>
              ))}
            </Select>
          </Space>

          <Table
            columns={fileColumns}
            dataSource={filteredFiles}
            rowKey="id"
            loading={loading}
            size="small"
            pagination={{ pageSize: 10 }}
            expandable={{
              expandedRowRender: (record: ConversationFile) => (
                <div style={{ padding: '8px 0' }}>
                  <Text strong>ÊèèËø∞: </Text>
                  <Text>{record.description || 'Êó†ÊèèËø∞'}</Text>
                  <br />
                  <Text strong>Ë∑ØÂæÑ: </Text>
                  <Text code>{record.relative_path}</Text>
                  <br />
                  <Text strong>Ê†áÁ≠æ: </Text>
                  {record.tags.map(tag => (
                    <Tag key={tag} size="small">{tag}</Tag>
                  ))}
                </div>
              ),
            }}
          />
        </TabPane>

        <TabPane 
          tab={
            <Space>
              <AnalysisOutlined />
              Êô∫ËÉΩÂàÜÊûê
              {analysis && <Tag color="green">Â∑≤ÂàÜÊûê</Tag>}
            </Space>
          } 
          key="analysis"
        >
          {analysis ? (
            <div>
              <Card size="small" style={{ marginBottom: 16 }}>
                <Title level={5}>üìã ÂàÜÊûêÊëòË¶Å</Title>
                <Text><strong>‰ªªÂä°ÁõÆÊ†á:</strong> {analysis.task_goal}</Text>
                <br />
                <Text><strong>ÂàÜÊûêÊó∂Èó¥:</strong> {new Date(analysis.analysis_timestamp).toLocaleString()}</Text>
                <br />
                <Text><strong>ÂàÜÊûêÊñá‰ª∂Êï∞:</strong> {analysis.total_files_analyzed}</Text>
                <Divider />
                <Text>{analysis.delivery_summary}</Text>
                <br />
                <div style={{ marginTop: 16 }}>
                  <Button 
                    type="primary" 
                    icon={<PackageOutlined />}
                    onClick={downloadDeliverablePackage}
                    loading={loading}
                  >
                    ‰∏ãËΩΩ‰∫§‰ªòÁâ©ÊâìÂåÖ
                  </Button>
                </div>
              </Card>

              <Table
                columns={analysisColumns}
                dataSource={analysis.recommended_files}
                rowKey="file_id"
                size="small"
                pagination={{ pageSize: 10 }}
              />
            </div>
          ) : (
            <div style={{ textAlign: 'center', padding: '40px 0' }}>
              <Title level={4}>ü§ñ Êô∫ËÉΩ‰∫§‰ªòÁâ©ÂàÜÊûê</Title>
              <Text type="secondary">
                ÁÇπÂáª"Êô∫ËÉΩÂàÜÊûê"ÊåâÈíÆÔºåAIÂ∞ÜÂàÜÊûêÂØπËØù‰∏≠ÁöÑÊñá‰ª∂ÔºåÊé®ËçêÊúÄÈÄÇÂêà‰∫§‰ªòÁªôÂÆ¢Êà∑ÁöÑÊñá‰ª∂ÁªÑÂêà
              </Text>
              <br />
              <Button 
                type="primary" 
                icon={<AnalysisOutlined />}
                onClick={analyzeDeliverables}
                loading={analyzing}
                style={{ marginTop: 16 }}
              >
                ÂºÄÂßãÊô∫ËÉΩÂàÜÊûê
              </Button>
            </div>
          )}
        </TabPane>
      </Tabs>
    </Modal>
  );
};

export default FileManager;